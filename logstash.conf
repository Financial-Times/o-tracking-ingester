input {
  kinesis {
    kinesis_stream_name => "${SPOOR_KINESIS_STREAM}"
    application_name => "${SPOOR_KINESIS_APP_NAME}"
    checkpoint_interval_seconds => "${KINESIS_CHECKPOINT_INTERVAL:60}"
    region => "${KINESIS_AWS_REGION:es-west-1}"
    codec => json
  }
}

filter {
  json {
    source => "Message"
    skip_on_invalid_json => true
  }
  ruby {
    code => '
    event.set("annotations", event.get("[egest][annotations]")) if event.get("[egest][annotations]")
    event_id = event.get("[annotations][ingest][context][id]") || event.get("[annotations][context][id]")
    asset_type = event.get("[annotations][ingest][context][content][asset_type]")
    event.set("event_id", event_id)
    event.set("document_id", event_id)
    event.set("asset_type", asset_type)
    event.cancel if event.get("asset_type").nil? or event.get("asset_type") != "cct" or event.get("asset_type") != "internal"
    '
  }

  prune {
    whitelist_names => ["@timestamp", "annotations", "document_id", "asset_type"]
  }
}

output {
  amazon_es {
    hosts => ["${ES_AWS_HOST}"]
    region => "${ES_AWS_REGION}"
    aws_access_key_id => "${ES_AWS_ACCESS_KEY_ID}"
    aws_secret_access_key => "${ES_AWS_SECRET_ACCESS_KEY}"
    index => "realtime"
    doc_as_upsert => true
    document_id => "%{document_id}"
    action => "update"
  }
}